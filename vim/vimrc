let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/Vundle.vim/README.md')
if !filereadable(vundle_readme)
  echo "Installing Vundle.."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/gmarik/Vundle.vim ~/.vim/bundle/Vundle.vim
  let iCanHazVundle=0
endif

set nocompatible
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Extension libraries
Plugin 'tomtom/tlib_vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'xolox/vim-misc'
Plugin 'L9'

" Editor productivity
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'kshenoy/vim-signature'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'mru.vim'
Plugin 'mbbill/undotree'
" replace ack with ag (the silver searcher https://github.com/ggreer/the_silver_searcher)
Plugin 'rking/ag.vim' " The usage & available shortcut keys are on the github repo README
Plugin 'chrisbra/Recover.vim'

" Programming helpers
Plugin 'Shougo/neocomplcache.vim'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'tpope/vim-surround'
Plugin 'Raimondi/delimitMate'
Plugin 'nathanaelkane/vim-indent-guides'
"Plugin 'Yggdroot/indentLine'	" Make sure vim comes with 'conceal' feature
"Plugin 'seagoj/indentline-config.vim'
Plugin 'godlygeek/tabular'
Plugin 'bkad/CamelCaseMotion'
Plugin 'tpope/vim-commentary'
Plugin 'rizzatti/dash.vim'
"Plugin 'garbas/vim-snipmate'
"Plugin 'honza/vim-snippets'
Plugin 'matchit.zip'
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'glts/vim-textobj-comment'
Plugin 'editorconfig/editorconfig-vim'

" Language & FileType support
Plugin 'gregsexton/MatchTag'
Plugin 'pangloss/vim-javascript'
Plugin 'kchmck/vim-coffee-script'
Plugin 'gkz/vim-ls'
Plugin 'tpope/vim-haml'
Plugin 'slim-template/vim-slim'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'elzr/vim-json'
Plugin 'mattn/emmet-vim'
Plugin 'hail2u/vim-css3-syntax'
"Plugin 'nelstrom/vim-markdown-folding'
Plugin 'groenewege/vim-less'
Plugin 'JulesWang/css.vim' " only necessary if your Vim version < 7.4
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'tpope/vim-git'
Plugin 'airblade/vim-gitgutter'
Plugin 'StanAngeloff/php.vim'
Plugin 'klen/python-mode'

" Integration
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails'
Plugin 'moll/vim-node'
"Plugin 'xolox/vim-easytags'
Plugin 'majutsushi/tagbar'
Plugin 'walm/jshint.vim'
Plugin 'lambdalisue/vim-gista'
"Plugin 'scrooloose/syntastic'

" Color schemes
Plugin 'flazz/vim-colorschemes'

" All of your Plugins must be added before the following line
call vundle#end()            " required


" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line




" Character-encoding related settings early (before any other settings)
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,euc-jp,gbk,euc-kr,utf-bom,iso8859-1,euc-jp,utf-16le,latin1
set fileencoding=utf-8 encoding=utf-8 termencoding=utf-8



" Terminal & color & theme settings
set t_Co=256
let g:solarized_termcolors=256
colorscheme solarized
set background=dark
set background=light

syntax on
syntax enable

set splitright				" always open vertical split window in the right side
set splitbelow				" always open horizontal split window below


set laststatus=2			" Plugin: Powerline
set showtabline=2

" Various position indicators
set number				" show line numbers
set cursorline				" highlight the line on which the cursor is currently staying on
set colorcolumn=80			" mark a vertical darkline to indicate the 80th character in a line
highlight colorcolumn ctermbg=0
"match OverLength /\%>80v.\+/
"highlight OverLength ctermbg=darkred ctermfg=white guibg=#592929

" Search-related settings
set ignorecase				" do case insensitive matching
set smartcase				" do smart case matching
set hlsearch				" highlight search
set incsearch				" incremental search

" Backups & Files
set backup				" enable creation of backup file.
set backupdir=~/.vim/backups		" where backups will go.
set directory=~/.vim/tmp		" where temporary files (*.swp) will go.


set wildmode=longest,list		" use emacs-style tab completion when selecting files, etc
"set wildmenu				" make tab completion for files/buffers act like bash

set listchars=tab:▶\ ,eol:¬		" use the same symbols as TextMate for tabstops and EOLs

"set clipboard=unnamed			" copy cross vim instance
set pastetoggle=<F5>			" quickly toggle paste mode to avoid autoindent

" Default tabs & spaces
set tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab
set autoindent smartindent


if has("autocmd")
	" enable filetype-specific detection/plug-in/indenting
	filetype plugin indent on

	" * cursorline switched while focus is switched to another split window
	" ------------------------------------
	autocmd WinEnter * setlocal cursorline
	autocmd WinLeave * setlocal nocursorline

	" setting of nginx configuration file
	autocmd BufRead,BufNewFile /etc/nginx/* set ft=nginx

	" set tabindent to 2 in ruby/html/css/javascript/vim files
  " * tabstop:      the screen width of an existing \t
  " * softtabstop:  number of columns for a <Tab>
  " * shiftwidth:   indents with this width
  " * expandtab:    expand <Tab> into spaces
	autocmd FileType ruby,html,css,slim,vim       set tabstop=2 softtabstop=2 shiftwidth=2 expandtab "smarttab
	autocmd FileType javascript,markdown          set tabstop=4 softtabstop=4 shiftwidth=4 expandtab "smarttab

	" Source the vimrc file after saving it
	" ------------------------------------
	autocmd BufWritePost .vimrc source $MYVIMRC
endif




" ===================================================================
" Variable settings for plug-ins
" ===================================================================

" * Plugin: Airline
" ------------------------------------
"let g:airline_section_y = 'BN: %{bufnr("%")}'
"let g:airline_theme = 'molokai'
let g:airline_theme = 'light'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
"let g:airline#extensions#whitespace#enabled = 1

" * Plugin: Powerline
" ------------------------------------
"let g:Powerline_symbols='unicode'
"let g:Powerline_colorscheme = 'solarized256'

" * Plugin: GitGutter
" ------------------------------------
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1

" * Plugin: Taglist
" ------------------------------------
let Tlist_WinWidth=40
let Tlist_GainFocus_On_ToggleOpen=1

" * Plugin: NERDTree
" ------------------------------------
let NERDTreeDirArrows=1
let g:NERDTreeWinSize=30

" * Plugin: Surround
" ------------------------------------
"Create my custom surround for A
let g:surround_65 = "<a href=\"\">\r</a>"

" * Plugin: Surround
" ------------------------------------
let g:ruby_doc_command='open'

" * Syntax: Ruby
" ------------------------------------
"let ruby_fold=1

" * Plugin: Indent guides
" ------------------------------------
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237
let g:indent_guides_color_change_percent = 30
let g:indent_guides_guide_size = 1

" * Plugin: Indent Line
" ------------------------------------
let g:indentLine_char = '┆'
let g:indentLine_color_term = 232

" * Plugin: neocomplete
" ------------------------------------
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Enable heavy features.
" Use camel case completion.
"let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
"let g:neocomplcache_enable_underbar_completion = 1

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin ag.vim: https://github.com/rking/ag.vim
let g:ag_prg="/usr/local/bin/ag --vimgrep"
let g:ag_working_path_mode="r"

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplcache_enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplcache_enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_force_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'


" * Plugin: neosnippet
" ------------------------------------
" Enable snipMate compatibility feature.
"let g:neosnippet#enable_snipmate_compatibility = 1
" Tell Neosnippet about the other snippets
"let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'



" ===================================================================
" Key bindings
" ===================================================================

" * abandom the habit of using arrow key
" ------------------------------------
map <Up> <Nop>
map <Down> <Nop>
map <Left> <Nop>
map <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

" * Bash-style line editing in command-line mode
" ------------------------------------
cmap <C-A> <Home>
cmap <C-E> <End>

" * quickly load up my vimrc file
" ------------------------------------
nmap <leader>v :tabedit $MYVIMRC<CR>

" * quickly toggle between showing/hiding invisible characters
" ------------------------------------
nmap <leader>l :set list!<CR>

" * quickly look up in Dash for the keyword under cursor
" ------------------------------------
nmap <silent> <leader>d <Plug>DashSearch

" * add a side-effect of clearing search highlight to <C-l> (Clear screen)
" ------------------------------------
nnoremap <silent> <C-L> :<C-U>nohlsearch<CR><C-L>

" * speed up fold expanding/collapsing by mapping it to <Space>
" ------------------------------------
nnoremap <silent> <Space> za

" * Plugin: quick access to plugin functionalities
" ------------------------------------
nnoremap <silent> <F1> :MBEToggle<CR>
nnoremap <silent> <F2> :NERDTreeMirrorToggle<CR>
nnoremap <silent> <F4> :TlistToggle<CR>
nnoremap <silent> <F5> :UndotreeToggle<CR>

" * Plugin: neosnippet
" ------------------------------------
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif"


" * Add a shortcut to bring out Marked 2 markdown previewer
" ------------------------------------
nnoremap <leader>m :!open % -a Marked\ 2<CR> | redraw!

" * Add support for mouse under visual/normal/insert/commandline/prompt mode
set mouse=vnicr

